listPhoneDictTiming = shows computational time when using a list of tuples from word to pronunciation

mapPhoneDictTiming = shows comp time when using a HashMap instead

multPhone = shows increase in no. of passed tests when supporting multiple pronunciations for a word

usingARPABETtype = switching from representing arpabet with strings to its own data type to implement arrays. 
                  Initialisation of dict is noticably slower (~5 secs -> ~40 secs)

fuzzy1 = Threshold: 5. 
         Number of tests passing incresed from 412 -> 429 out of 577
         Many exceptions of "Exception: Prelude.minimum: empty list" which indicates word is not in dictionary
         Many failed tests are words where it is expected to pronounce individual letters like "is"
            (pronouncing "i" and "s" seperately can be similar to "eyes")
         Possible to add extra test cases where given words like "he will", the program converts it to "he'll" 

fuzzy2 = Seperated tests that do not pass because they don't exist in dictionary. 431/480 homophoneTable passed
         Code has not changed from fuzzy1 
         Most failed test cases are either words not in the dictionary or words that have R which is silent in British

usingStrNFuzzy = Using String dict instead for faster dict loading time. Only convert to Arpabet after lookupArpabet
                 Significantly faster (30s -> 4s)
                 Same tests as Fuzzy2. No extra tests should be passing but it increased from 431 to 436 (possible overlook)

convertToBRitish = Omits R sounds at the end of syllables. Also edited R to ER score mapping (100 -> 3)
                   Passing tests increased from 436 -> 467

TODO:
- Add false positives in tests to finetune fuzzy search
- add more accent features
- multiple words support for homophones rev dict function
- spoonerisms, rhyming, etc.
- Matches words not in dictionary? Or partially not in dictionary (past tense, letter pronunciations)
- stats for homophones (proportion of homophone)
- east london (TH -> F)
- Construct diff ways of pronouncing words (dialect and stuff)
- "EYOT"/"AIT" similar spelling to "buoy"
- separating words into syllables (homophones for word that doesn't exist)

former spoken on the radio
 |      |
 past   oral   = pastoral
 ["P","AE","S","T"] + ["AO","R","AH","L"] = ["P","AE","S","T","ER","AH","L"]

 splitNopt = split into multiple words

 ["past","oral"] and ["pastoral"] = true

 homophone of charades is a charade of homophones


 ghci> homophone ["in","close"] ["enclose"]
    True


["anele"] ["an","eel"] -- anele not in dict

["key","naps"] ["kneecaps"] -- spoonerisms. convert to arpabet then swap
remunerator, re numerator -- spoonerisms. quote for future works
["tidied"] ["tie","deed"] -- fuzzy homophone. tidied doesn't exist in dict

think abt usage of this other than crossword:
- speech recognition, especially from non native speakers with accents so fuzzy homophone
   can catch it.
- give to crossword setter


Future work:
- using neural network to help create dist MAtrix
- create pronunciations for unknown words

given [[...,high,tall,..],[jack,...]] we could filter stuff that obviously is not a homophone of hijack
   to save computational time but we sacrifice this for simpler code.


rev dictionary is to construct data for testing (especially fuzzy homophone)

mention in report that:
we can construct specific tables for specific accents.
we take a semantic approach compared to using Neural Network (dtaa already available)
"conger" and "conga" should not be a homophone despite being in homophoneTable (same with "pascal" n "paschal")

GENERATING HOMOPHONES!

THRESHOLD: 2
ghci> debugFuzzyHomophones "book"
[(0.0,"BOOK"),(1.0,"BOOCK")]

ghci> debugFuzzyHomophones "money"
[(1.0,"MANI"),(1.0,"MOHNEY"),(0.0,"MONEY"),(0.0,"MUNNI"),(1.0,"MAUNEY")]

ghci> debugFuzzyHomophones "racket"
[(0.0,"RACKET"),(0.0,"RACQUET"),(1.0,"RECKITT")]

ghci> debugFuzzyHomophones "seven"
[(0.0,"SEVEN"),(2.0,"SEVERN"),(2.0,"SAVON")]

THRESHOLD: 3
ghci> debugFuzzyHomophones "book"
[(3.0,"BAACK"),(3.0,"BACH"),(3.0,"BOCH"),(3.0,"BOCK"),(3.0,"BOHLKE"),(3.0,"BOK"),(3.0,"BACK"),(3.0,"BACKE"),
(3.0,"BAK"),(3.0,"BAKKE"),(3.0,"BUC"),(3.0,"BUCK"),(3.0,"BALK"),(3.0,"BAEK"),(3.0,"BEC"),(3.0,"BECK"),(3.0,"BIC"),
(3.0,"BICK"),(3.0,"BAEK"),(3.0,"BEAK"),(3.0,"BEECK"),(3.0,"BEEK"),(3.0,"BOAK"),(3.0,"BOAKE"),(3.0,"BOECK"),(3.0,"BOEKE"),
(3.0,"BOUCK"),(3.0,"BUTCH"),(0.0,"BOOK"),(1.0,"BOOCK")]

ghci> debugFuzzyHomophones "money"
[(1.0,"MANI"),(1.0,"MOHNEY"),(3.0,"MANNEY"),(3.0,"MANNI"),(3.0,"MANNIE"),(3.0,"MANNY"),(0.0,"MONEY"),(0.0,"MUNNI"),
(1.0,"MAUNEY"),(3.0,"MANY"),(3.0,"MANEY"),(3.0,"MONY"),(3.0,"MOONEY"),(3.0,"MOONIE")]

ghci> debugFuzzyHomophones "racket"
[(3.0,"ROCKETT"),(0.0,"RACKET"),(0.0,"RACQUET"),(1.0,"RECKITT"),(3.0,"RICKETT")]

THRESHOLD: 5
ghci> debugFuzzyHomophones "book"
[(3.0,"BAACK"),(3.0,"BACH"),(3.0,"BOCH"),(3.0,"BOCK"),(3.0,"BOHLKE"),(3.0,"BOK"),(3.0,"BACK"),(3.0,"BACKE"),
(3.0,"BAK"),(3.0,"BAKKE"),(3.0,"BUC"),(3.0,"BUCK"),(3.0,"BALK"),(3.0,"BAEK"),(3.0,"BEC"),(3.0,"BECK"),(4.0,"BERCH"),
(4.0,"BERK"),(4.0,"BERKE"),(4.0,"BIRK"),(4.0,"BOURKE"),(4.0,"BURCK"),(4.0,"BURK"),(4.0,"BURKE"),(4.0,"BAKE"),
(3.0,"BIC"),(3.0,"BICK"),(3.0,"BAEK"),(3.0,"BEAK"),(3.0,"BEECK"),(3.0,"BEEK"),(3.0,"BOAK"),(3.0,"BOAKE"),(3.0,"BOECK"),
(3.0,"BOEKE"),(3.0,"BOUCK"),(5.0,"BOIK"),(5.0,"BOIKE"),(3.0,"BUTCH"),(0.0,"BOOK"),(4.0,"BUECHE"),(1.0,"BOOCK")]

ghci> debugFuzzyHomophones "synch"
[(0.0,"CINCH"),(0.0,"SYNCH"),(3.0,"SINGE"),(4.0,"CINQ"),(4.0,"CINQUE"),(4.0,"SINK"),(4.0,"SYNC")]

ghci> debugFuzzyHomophones "dramatic"
[(0.0,"DRAMATIC"),(4.0,"TRAUMATIC")]

Spoonerisms: 29035 5 down remunerator

solver.cabal and Evaluation.hs

dodgy Homophones:
Guardian 26,698 19 Down
   ghci> isHomophone ["cure","it"] ["curate"] All
   True
   ghci> lookupArpabet "cure"
   Just [["K","Y","UH","R"]]
   ghci> lookupArpabet "it"
   Just [["IH","T"],["IH","T"]]
   ghci> lookupArpabet "curate"
   Just [["K","Y","UH","R","AH","T"]]

Independent 10,735
   ghci> isHomophone ["faux","beer"] ["phobia"] All
   False
   ghci> lookupArpabet "faux"
   Just [["F","OW"]]
   ghci> lookupArpabet "beer"
   Just [["B","IH","R"]]
   ghci> lookupArpabet "phobia"
   Just [["F","OW","B","IY","AH"]]

Guardian Cryptic N° 26,064
   Drink booked with 1 across 23, roughly speaking? (7) (ans of 1,23 Across is Mockingbird)
   TEQUILA		Ouch. The culmination of progressively more playful homophones 
               (Paul does say ‘roughly’), a reference to the book To Kill a Mockingbird by Harper Lee. 
